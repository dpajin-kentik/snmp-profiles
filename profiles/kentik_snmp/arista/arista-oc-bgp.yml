# arista-oc-bgp.yml
# SNMP: ARISTA-BGP4V2-MIB::aristaBgp4V2PeerTable
# OC: /network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state
# Kentik-path: /protocols/bgp/neighbors
#
# Profile intents to collect metadata and metrics about device interface from SNMP BGP4-V2-MIB-JUNIPER
# Trying to normalize metrics to openconfig-bgp model as much as possible

---

extends:
  - oc-bgp-global.yml

metrics:

# Description: BGP neighbors metadata and status
# SNMP: ARISTA-BGP4V2-MIB::aristaBgp4V2PeerTable
# OC: /network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state
# Kentik-path: /protocols/bgp/neighbors

  - MIB: /protocols   # openconfig-bgp
    table:
      OID: .1.3.6.1.4.1.30065.4.1.1.2
      name: bgp/neighbors
      # oc-path: /network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/state

    symbols:

      - tag: bgp:session-state
        OID: .1.3.6.1.4.1.30065.4.1.1.2.1.13
        name: aristaBgp4V2PeerState
        enum:
          IDLE: 1
          CONNECT: 2
          ACTIVE: 3
          OPENSENT: 4
          OPENCONFIRM: 5
          ESTABLISHED: 6

      - tag: bgp:in-updates
        OID: .1.3.6.1.4.1.30065.4.1.1.7.1.1
        name: aristaBgp4V2PeerInUpdates
        
      - tag: bgp:out-updates
        OID: .1.3.6.1.4.1.30065.4.1.1.7.1.2
        name: aristaBgp4V2PeerOutUpdates
        
      - tag: bgp:in-messages
        OID: .1.3.6.1.4.1.30065.4.1.1.7.1.3
        name: aristaBgp4V2PeerInTotalMessages
        
      - tag: bgp:out-messages
        OID: .1.3.6.1.4.1.30065.4.1.1.7.1.4
        name: aristaBgp4V2PeerOutTotalMessages
        
      - tag: bgp:established-transitions
        OID: .1.3.6.1.4.1.30065.4.1.1.7.1.5
        name: aristaBgp4V2PeerFsmEstablishedTransitions

      # - tag: bgp:last-established
      #   OID: .1.3.6.1.4.1.2636.5.1.1.2.4.1.1.1
      #   name: jnxBgpM2PeerFsmEstablishedTime

    metric_tags:

      - tag: bgp:enabled
        column:
          OID: .1.3.6.1.4.1.30065.4.1.1.2.1.12
          name: aristaBgp4V2PeerAdminStatus
          enum:
            "false": 1
            "true": 2

      - tag: bgp:neighbor-address
        column:
          OID: .1.3.6.1.4.1.30065.4.1.1.2.1.11
          name: aristaBgp4V2PeerRemoteIdentifier

      - tag: bgp:local-address-type
        column:
          OID: .1.3.6.1.4.1.30065.4.1.1.2.1.2
          name: aristaBgp4V2PeerLocalAddrType
          enum:
            unknown: 0
            ipv4: 1
            ipv6: 2
            ipv4z: 3
            ipv6z: 4
            dns: 16

      - tag: bgp:local-address
        column:
          OID: .1.3.6.1.4.1.30065.4.1.1.2.1.3
          name: aristaBgp4V2PeerLocalAddr
          conversion: hextoip

      - tag: bgp:local-port
        column:
          OID: .1.3.6.1.4.1.30065.4.1.1.2.1.6
          name: aristaBgp4V2PeerLocalPort

      - tag: bgp:local-as
        column:
          OID: .1.3.6.1.4.1.30065.4.1.1.2.1.7
          name: aristaBgp4V2PeerLocalAs

      - tag: bgp:remote-address-type
        column:
          OID: .1.3.6.1.4.1.30065.4.1.1.2.1.4
          name: aristaBgp4V2PeerRemoteAddrType
          enum:
            ipv4: 1
            ipv6: 2

      - tag: bgp:remote-address
        column:
          OID: .1.3.6.1.4.1.30065.4.1.1.2.1.5
          name: aristaBgp4V2PeerRemoteAddr
          conversion: hextoip

      - tag: bgp:remote-port
        column:
          OID: .1.3.6.1.4.1.30065.4.1.1.2.1.9
          name: aristaBgp4V2PeerRemotePort

      - tag: bgp:peer-as
        column:
          OID: .1.3.6.1.4.1.30065.4.1.1.2.1.10
          name: aristaBgp4V2PeerRemoteAs
          # populating peer-index with index value for consistency with juniper
          script: |
            def main(n):
              n["bgp:bgp:prefix-table-index"] = n.Index
              return None

      # Not in the OC - this is used to correlate the prefix counters in the different table        
      # We can make peer-index from the index with starlark script
      # - tag: bgp:peer-index
      #   column:
      #     OID: .1.3.6.1.4.1.2636.5.1.1.2.1.1.1.14
      #     name: jnxBgpM2PeerIndex

      - tag: bgp:network-instance
        column:
          OID: .1.3.6.1.4.1.30065.4.1.1.2.1.1
          name: aristaBgp4V2PeerInstance



# Description: BGP prefixes per neighbor
# SNMP: ARISTA-BGP4V2-MIB::aristaBgp4V2PrefixGaugesTable
# OC: /network-instances/network-instance/protocols/protocol/bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes
# Kentik-path: /protocols/bgp/neighbors/prefixes

  - MIB: /protocols
    table:
      OID: .1.3.6.1.4.1.30065.4.1.1.8
      name: bgp/neighbors/prefixes

    symbols:

      - tag: bgp:received-pre-policy    # in-prefixes
        OID: .1.3.6.1.4.1.30065.4.1.1.8.1.3
        name: aristaBgp4V2PrefixInPrefixes
        
      - tag: bgp:received     # in-prefixes-accepted
        OID: .1.3.6.1.4.1.30065.4.1.1.8.1.4
        name: aristaBgp4V2PrefixInPrefixesAccepted

      # This can be calculated from previous two
      # - tag: bgp:rejected    # in-prefixes-rejected
      #   name: jnxBgpM2PrefixInPrefixesRejected
        
      - tag: bgp:sent    # out-prefixes
        OID: .1.3.6.1.4.1.30065.4.1.1.8.1.5
        name: aristaBgp4V2PrefixOutPrefixes(5)
        
      # - tag: bgp:installed    # in-prefixes-active
      #   name: jnxBgpM2PrefixInPreixesActive
        

    metric_tags:

    # OC: afi-safi-name
    # https://github.com/openconfig/public/blob/master/release/models/bgp/openconfig-bgp-types.yang

    # This is not returned, has to be extracted with the script
    # - tag: bgp:afi
    #   column:
    #     OID: .1.3.6.1.4.1.30065.4.1.1.8.1.1
    #     name: aristaBgp4V2PrefixGaugesAfi
    #     enum:
    #       UNKNOWN: 0
    #       IPV4: 1
    #       IPV6: 2
    #       IPV4Z: 3
    #       IPV6Z: 4
    #       DNS: 16
    #       L2VPN: 25
    #       LINKSTATE: 16388

    # # This is not returned, has to be extracted with the script
    # - tag: bgp:safi
    #   column:
    #     OID: .1.3.6.1.4.1.30065.4.1.1.8.1.2
    #     name: aristaBgp4V2PrefixGaugesSafi
    #     enum:
    #       UNICAST: 1
    #       MULTICAST: 2
    #       LABELED_UNICAST: 4
    #       L3VPN: 128
    #       MCAST-VPN: 129
    #       FLOWSPEC: 133
    #       MS-PW: 6
    #       VPLS: 65
    #       EVPN: 70
    #       LINKSTATE: 71
    #       VPN: 72

    # This is only used to run script
    - tag: bgp:fake
      column:
        OID: .1.3.6.1.4.1.30065.4.1.1.8.1.3
        name: aristaBgp4V2PrefixInPrefixes
        enum:
        script: |
          def main(n):
            new_index_list = n.Index.rsplit(".", 2)
            if new_index_list[1] == "0":
              n["bgp:afi"] = "UNKNOWN"
            elif new_index_list[1] == "1":
              n["bgp:afi"] = "IPV4"
            elif new_index_list[1] == "2":
              n["bgp:afi"] = "IPV6"
            elif new_index_list[1] == "3":
              n["bgp:afi"] = "IPV4Z"
            elif new_index_list[1] == "4":
              n["bgp:afi"] = "IPV6Z"
            elif new_index_list[1] == "16":
              n["bgp:afi"] = "DNS"
            elif new_index_list[1] == "25":
              n["bgp:afi"] = "L2VPN"
            elif new_index_list[1] == "16388":
              n["bgp:afi"] = "LINKSTATE"

            if new_index_list[2] == "1":
              n["bgp:safi"] = "UNICAST"
            elif new_index_list[2] == "2":
              n["bgp:safi"] = "MULTICAST"
            elif new_index_list[2] == "4":
              n["bgp:safi"] = "LABELED_UNICAST"
            elif new_index_list[2] == "128":
              n["bgp:safi"] = "L3VPN"
            elif new_index_list[2] == "129":
              n["bgp:safi"] = "MCAST-VPN"
            elif new_index_list[2] == "133":
              n["bgp:safi"] = "FLOWSPEC"
            elif new_index_list[2] == "6":
              n["bgp:safi"] = "MS-PW"
            elif new_index_list[2] == "6":
              n["bgp:safi"] = "MS-PW"
            elif new_index_list[2] == "65":
              n["bgp:safi"] = "MS-PW"
            elif new_index_list[2] == "70":
              n["bgp:safi"] = "EVPN"
            elif new_index_list[2] == "71":
              n["bgp:safi"] = "LINKSTATE"
            elif new_index_list[2] == "72":
              n["bgp:safi"] = "VPN"

            n.Index = new_index_list[0]
            return None

